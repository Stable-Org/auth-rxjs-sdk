// tslint:disable
/**
 * Stable - Auth Service
 * An authentication service API for Stable
 *
 * The version of the OpenAPI document: 0.0.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined } from '../runtime';
import type { OperationOpts, HttpHeaders } from '../runtime';
import type {
    AcceptedResponseDto,
    BadRequestResponseDto,
    ConfirmForgotPasswordRequestDto,
    ConfirmRequestDto,
    ForgotPasswordRequestDto,
    LoginRequestDto,
    LoginResponseDto,
    RefreshTokenRequestDto,
    RefreshTokenResponseDto,
    RegisterRequestDto,
    UnauthorizedResponseDto,
} from '../models';

export interface ConfirmRequest {
    confirmRequestDto: ConfirmRequestDto;
}

export interface ConfirmForgotPasswordRequest {
    confirmForgotPasswordRequestDto: ConfirmForgotPasswordRequestDto;
}

export interface ForgotPasswordRequest {
    forgotPasswordRequestDto: ForgotPasswordRequestDto;
}

export interface LoginRequest {
    loginRequestDto: LoginRequestDto;
}

export interface RefreshTokenRequest {
    refreshTokenRequestDto: RefreshTokenRequestDto;
}

export interface RegisterRequest {
    registerRequestDto: RegisterRequestDto;
}

/**
 * no description
 */
export class AuthApi extends BaseAPI {

    /**
     * Confirm user account
     */
    confirm({ confirmRequestDto }: ConfirmRequest): Observable<void>
    confirm({ confirmRequestDto }: ConfirmRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    confirm({ confirmRequestDto }: ConfirmRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(confirmRequestDto, 'confirmRequestDto', 'confirm');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/auth/users/confirm',
            method: 'POST',
            headers,
            body: confirmRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Confirm and reset forgotten password
     */
    confirmForgotPassword({ confirmForgotPasswordRequestDto }: ConfirmForgotPasswordRequest): Observable<LoginResponseDto>
    confirmForgotPassword({ confirmForgotPasswordRequestDto }: ConfirmForgotPasswordRequest, opts?: OperationOpts): Observable<AjaxResponse<LoginResponseDto>>
    confirmForgotPassword({ confirmForgotPasswordRequestDto }: ConfirmForgotPasswordRequest, opts?: OperationOpts): Observable<LoginResponseDto | AjaxResponse<LoginResponseDto>> {
        throwIfNullOrUndefined(confirmForgotPasswordRequestDto, 'confirmForgotPasswordRequestDto', 'confirmForgotPassword');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<LoginResponseDto>({
            url: '/auth/users/confirm-forgot-password',
            method: 'POST',
            headers,
            body: confirmForgotPasswordRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Initiate forgot password
     */
    forgotPassword({ forgotPasswordRequestDto }: ForgotPasswordRequest): Observable<void>
    forgotPassword({ forgotPasswordRequestDto }: ForgotPasswordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    forgotPassword({ forgotPasswordRequestDto }: ForgotPasswordRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(forgotPasswordRequestDto, 'forgotPasswordRequestDto', 'forgotPassword');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/auth/users/forgot-password',
            method: 'POST',
            headers,
            body: forgotPasswordRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Log in a user
     */
    login({ loginRequestDto }: LoginRequest): Observable<LoginResponseDto>
    login({ loginRequestDto }: LoginRequest, opts?: OperationOpts): Observable<AjaxResponse<LoginResponseDto>>
    login({ loginRequestDto }: LoginRequest, opts?: OperationOpts): Observable<LoginResponseDto | AjaxResponse<LoginResponseDto>> {
        throwIfNullOrUndefined(loginRequestDto, 'loginRequestDto', 'login');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<LoginResponseDto>({
            url: '/auth/users/login',
            method: 'POST',
            headers,
            body: loginRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Refresh user tokens
     */
    refreshToken({ refreshTokenRequestDto }: RefreshTokenRequest): Observable<RefreshTokenResponseDto>
    refreshToken({ refreshTokenRequestDto }: RefreshTokenRequest, opts?: OperationOpts): Observable<AjaxResponse<RefreshTokenResponseDto>>
    refreshToken({ refreshTokenRequestDto }: RefreshTokenRequest, opts?: OperationOpts): Observable<RefreshTokenResponseDto | AjaxResponse<RefreshTokenResponseDto>> {
        throwIfNullOrUndefined(refreshTokenRequestDto, 'refreshTokenRequestDto', 'refreshToken');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<RefreshTokenResponseDto>({
            url: '/auth/users/refresh-token',
            method: 'POST',
            headers,
            body: refreshTokenRequestDto,
        }, opts?.responseOpts);
    };

    /**
     * Register a user
     */
    register({ registerRequestDto }: RegisterRequest): Observable<LoginResponseDto>
    register({ registerRequestDto }: RegisterRequest, opts?: OperationOpts): Observable<AjaxResponse<LoginResponseDto>>
    register({ registerRequestDto }: RegisterRequest, opts?: OperationOpts): Observable<LoginResponseDto | AjaxResponse<LoginResponseDto>> {
        throwIfNullOrUndefined(registerRequestDto, 'registerRequestDto', 'register');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<LoginResponseDto>({
            url: '/auth/users/register',
            method: 'POST',
            headers,
            body: registerRequestDto,
        }, opts?.responseOpts);
    };

}
